#version 400

// TessEval

layout(triangles, equal_spacing, cw) in;
in vec3 tcVert[];
in vec3 tcNorm[];

out vec3 tePosition_worldspace;
out vec3 teNormal_cameraspace;
out vec3 teEyeDirection_cameraspace;
out vec3 teLightDirection_cameraspace;
out vec3 tePatchDistance;

//in vec3 tcPosition[];
//out vec3 tePosition;
//out vec3 tePatchDistance;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform vec3 light_position;

uniform mat3 NormalMatrix;

void main()
{
	tePatchDistance = gl_TessCoord;

    vec3 p0 = gl_TessCoord.x * tcVert[0];
    vec3 p1 = gl_TessCoord.y * tcVert[1];
    vec3 p2 = gl_TessCoord.z * tcVert[2];
    vec3 tePosition = (p0 + p1 + p2);
	
    gl_Position = MVP * vec4(tePosition, 1.0);

    // Position of the vertex, in worldspace : M * position
    tePosition_worldspace = (M * vec4(tePosition, 1.0)).xyz;
    
    // Vector that goes from the vertex to the camera, in camera space.
    // In camera space, the camera is at the origin (0,0,0).
    vec3 vertexPosition_cameraspace = ( V * M * vec4(tePosition, 1.0)).xyz;
    teEyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;
    
    // Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
    vec3 LightPosition_cameraspace = ( V * vec4(light_position, 1.0)).xyz;
    teLightDirection_cameraspace = LightPosition_cameraspace + teEyeDirection_cameraspace;
    
    vec3 q0 = gl_TessCoord.x * tcNorm[0];
    vec3 q1 = gl_TessCoord.y * tcNorm[1];
    vec3 q2 = gl_TessCoord.z * tcNorm[2];

    vec3 teNorm = (q0 + q1 + q2) / 3.0f;

	//mat4 nor_mat = transpose(inverse(V * M));
    // Normal of the the vertex, in camera space
    teNormal_cameraspace = ( NormalMatrix * teNorm ); // Only correct if ModelMatrix does not scale the model ! Use its inverse transpose if not.

}